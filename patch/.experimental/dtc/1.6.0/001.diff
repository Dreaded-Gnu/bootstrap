diff --git Makefile Makefile
index f02aa19..38aa6bb 100644
--- Makefile
+++ Makefile
@@ -23,7 +23,7 @@ ASSUME_MASK ?= 0
 CPPFLAGS = -I libfdt -I . -DFDT_ASSUME_MASK=$(ASSUME_MASK)
 WARNINGS = -Wall -Wpointer-arith -Wcast-qual -Wnested-externs \
 	-Wstrict-prototypes -Wmissing-prototypes -Wredundant-decls -Wshadow
-CFLAGS = -g -Os $(SHAREDLIB_CFLAGS) -Werror $(WARNINGS) $(EXTRA_CFLAGS)
+CFLAGS = -g -Os -Werror $(WARNINGS) $(EXTRA_CFLAGS)
 
 BISON = bison
 LEX = flex
@@ -61,20 +61,6 @@ else
 	LDLIBS_dtc += $(shell $(PKG_CONFIG) --libs yaml-0.1)
 endif
 
-ifeq ($(HOSTOS),darwin)
-SHAREDLIB_EXT     = dylib
-SHAREDLIB_CFLAGS  = -fPIC
-SHAREDLIB_LDFLAGS = -fPIC -dynamiclib -Wl,-install_name -Wl,
-else ifeq ($(HOSTOS),$(filter $(HOSTOS),msys cygwin))
-SHAREDLIB_EXT     = so
-SHAREDLIB_CFLAGS  =
-SHAREDLIB_LDFLAGS = -shared -Wl,--version-script=$(LIBFDT_version) -Wl,-soname,
-else
-SHAREDLIB_EXT     = so
-SHAREDLIB_CFLAGS  = -fPIC
-SHAREDLIB_LDFLAGS = -fPIC -shared -Wl,--version-script=$(LIBFDT_version) -Wl,-soname,
-endif
-
 #
 # Overall rules
 #
@@ -191,23 +177,16 @@ endif
 #
 LIBFDT_dir = libfdt
 LIBFDT_archive = $(LIBFDT_dir)/libfdt.a
-LIBFDT_lib = $(LIBFDT_dir)/$(LIBFDT_LIB)
 LIBFDT_include = $(addprefix $(LIBFDT_dir)/,$(LIBFDT_INCLUDES))
 LIBFDT_version = $(addprefix $(LIBFDT_dir)/,$(LIBFDT_VERSION))
 
 include $(LIBFDT_dir)/Makefile.libfdt
 
 .PHONY: libfdt
-libfdt: $(LIBFDT_archive) $(LIBFDT_lib)
+libfdt: $(LIBFDT_archive)
 
 $(LIBFDT_archive): $(addprefix $(LIBFDT_dir)/,$(LIBFDT_OBJS))
 
-$(LIBFDT_lib): $(addprefix $(LIBFDT_dir)/,$(LIBFDT_OBJS)) $(LIBFDT_version)
-	@$(VECHO) LD $@
-	$(CC) $(LDFLAGS) $(SHAREDLIB_LDFLAGS)$(LIBFDT_soname) -o $(LIBFDT_lib) \
-		$(addprefix $(LIBFDT_dir)/,$(LIBFDT_OBJS))
-	ln -sf $(LIBFDT_LIB) $(LIBFDT_dir)/$(LIBFDT_soname)
-
 ifneq ($(DEPTARGETS),)
 -include $(LIBFDT_OBJS:%.o=$(LIBFDT_dir)/%.d)
 endif
@@ -226,9 +205,6 @@ install-bin: all $(SCRIPTS)
 install-lib: all
 	@$(VECHO) INSTALL-LIB
 	$(INSTALL) -d $(DESTDIR)$(LIBDIR)
-	$(INSTALL_LIB) $(LIBFDT_lib) $(DESTDIR)$(LIBDIR)
-	ln -sf $(notdir $(LIBFDT_lib)) $(DESTDIR)$(LIBDIR)/$(LIBFDT_soname)
-	ln -sf $(LIBFDT_soname) $(DESTDIR)$(LIBDIR)/libfdt.$(SHAREDLIB_EXT)
 	$(INSTALL_DATA) $(LIBFDT_archive) $(DESTDIR)$(LIBDIR)
 
 install-includes:
@@ -258,11 +234,11 @@ convert-dtsv0: $(CONVERT_OBJS)
 
 fdtdump:	$(FDTDUMP_OBJS)
 
-fdtget:	$(FDTGET_OBJS) $(LIBFDT_lib)
+fdtget:	$(FDTGET_OBJS) $(LIBFDT_archive)
 
-fdtput:	$(FDTPUT_OBJS) $(LIBFDT_lib)
+fdtput:	$(FDTPUT_OBJS) $(LIBFDT_archive)
 
-fdtoverlay: $(FDTOVERLAY_OBJS) $(LIBFDT_lib)
+fdtoverlay: $(FDTOVERLAY_OBJS) $(LIBFDT_archive)
 
 dist:
 	git archive --format=tar --prefix=dtc-$(dtc_version)/ HEAD \
@@ -323,7 +299,7 @@ include tests/Makefile.tests
 #
 # Clean rules
 #
-STD_CLEANFILES = *~ *.o *.$(SHAREDLIB_EXT) *.d *.a *.i *.s core a.out vgcore.* \
+STD_CLEANFILES = *~ *.o *.d *.a *.i *.s core a.out vgcore.* \
 	*.tab.[ch] *.lex.c *.output
 
 clean: libfdt_clean pylibfdt_clean tests_clean
diff --git checks.c checks.c
index 8acbc05..0e0e61c 100644
--- checks.c
+++ checks.c
@@ -5,6 +5,7 @@
 
 #include "dtc.h"
 #include "srcpos.h"
+#include <inttypes.h>
 
 #ifdef TRACE_CHECKS
 #define TRACE(c, ...) \
@@ -498,7 +499,7 @@ static cell_t check_phandle_prop(struct check *c, struct dt_info *dti,
 	phandle = propval_cell(prop);
 
 	if ((phandle == 0) || (phandle == -1)) {
-		FAIL_PROP(c, dti, node, prop, "bad value (0x%x) in %s property",
+		FAIL_PROP(c, dti, node, prop, "bad value (0x%"PRIx32") in %s property",
 		     phandle, prop->name);
 		return 0;
 	}
@@ -533,7 +534,7 @@ static void check_explicit_phandles(struct check *c, struct dt_info *dti,
 
 	other = get_node_by_phandle(root, phandle);
 	if (other && (other != node)) {
-		FAIL(c, dti, node, "duplicated phandle 0x%x (seen before at %s)",
+		FAIL(c, dti, node, "duplicated phandle 0x%"PRIx32" (seen before at %s)",
 		     phandle, other->fullpath);
 		return;
 	}
@@ -1044,7 +1045,7 @@ static void check_i2c_bus_reg(struct check *c, struct dt_info *dti, struct node
 	}
 
 	reg = fdt32_to_cpu(*cells);
-	snprintf(unit_addr, sizeof(unit_addr), "%x", reg);
+	snprintf(unit_addr, sizeof(unit_addr), "%"PRIx32, reg);
 	if (!streq(unitname, unit_addr))
 		FAIL(c, dti, node, "I2C bus unit address format error, expected \"%s\"",
 		     unit_addr);
@@ -1052,7 +1053,7 @@ static void check_i2c_bus_reg(struct check *c, struct dt_info *dti, struct node
 	for (len = prop->val.len; len > 0; len -= 4) {
 		reg = fdt32_to_cpu(*(cells++));
 		if (reg > 0x3ff)
-			FAIL_PROP(c, dti, node, prop, "I2C address must be less than 10-bits, got \"0x%x\"",
+			FAIL_PROP(c, dti, node, prop, "I2C address must be less than 10-bits, got \"0x%"PRIx32"\"",
 				  reg);
 
 	}
@@ -1128,7 +1129,7 @@ static void check_spi_bus_reg(struct check *c, struct dt_info *dti, struct node
 	}
 
 	reg = fdt32_to_cpu(*cells);
-	snprintf(unit_addr, sizeof(unit_addr), "%x", reg);
+	snprintf(unit_addr, sizeof(unit_addr), "%"PRIx32, reg);
 	if (!streq(unitname, unit_addr))
 		FAIL(c, dti, node, "SPI bus unit address format error, expected \"%s\"",
 		     unit_addr);
@@ -1151,7 +1152,7 @@ static void check_unit_address_format(struct check *c, struct dt_info *dti,
 		/* skip over 0x for next test */
 		unitname += 2;
 	}
-	if (unitname[0] == '0' && isxdigit(unitname[1]))
+	if (unitname[0] == '0' && isxdigit(( unsigned char )unitname[1]))
 		FAIL(c, dti, node, "unit name should not have leading 0s");
 }
 WARNING(unit_address_format, check_unit_address_format, NULL,
@@ -1689,7 +1690,7 @@ static void check_graph_reg(struct check *c, struct dt_info *dti,
 		return;
 	}
 
-	snprintf(unit_addr, sizeof(unit_addr), "%x", propval_cell(prop));
+	snprintf(unit_addr, sizeof(unit_addr), "%"PRIx32, propval_cell(prop));
 	if (!streq(unitname, unit_addr))
 		FAIL(c, dti, node, "graph node unit address error, expected \"%s\"",
 		     unit_addr);
diff --git fdtget.c fdtget.c
index 777582e..f05aaa1 100644
--- fdtget.c
+++ fdtget.c
@@ -15,6 +15,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <inttypes.h>
 
 #include <libfdt.h>
 
@@ -188,7 +189,7 @@ static int list_subnodes(const void *blob, int node)
 			break;
 		default:
 			if (level <= depth)
-				printf("Unknown tag 0x%08X\n", tag);
+				printf("Unknown tag 0x%08"PRIX32"\n", tag);
 			return 1;
 		}
 		node = nextoffset;
diff --git flattree.c flattree.c
index bd6977e..21da8f9 100644
--- flattree.c
+++ flattree.c
@@ -5,6 +5,7 @@
 
 #include "dtc.h"
 #include "srcpos.h"
+#include <inttypes.h>
 
 #define FTF_FULLPATH	0x1
 #define FTF_VARALIGN	0x2
@@ -124,7 +125,7 @@ static void asm_emit_cell(void *e, cell_t val)
 {
 	FILE *f = e;
 
-	fprintf(f, "\t.byte 0x%02x; .byte 0x%02x; .byte 0x%02x; .byte 0x%02x\n",
+	fprintf(f, "\t.byte 0x%02"PRIx32"; .byte 0x%02"PRIx32"; .byte 0x%02"PRIx32"; .byte 0x%02"PRIx32"\n",
 		(val >> 24) & 0xff, (val >> 16) & 0xff,
 		(val >> 8) & 0xff, val & 0xff);
 }
@@ -779,7 +780,7 @@ static struct node *unflatten_tree(struct inbuf *dtbuf,
 			break;
 
 		default:
-			die("Invalid opcode word %08x in device tree blob\n",
+			die("Invalid opcode word %08"PRIx32" in device tree blob\n",
 			    val);
 		}
 	} while (val != FDT_END_NODE);
@@ -839,7 +840,7 @@ struct dt_info *dt_from_blob(const char *fname)
 
 	totalsize = fdt32_to_cpu(totalsize_buf);
 	if (totalsize < FDT_V1_SIZE)
-		die("DT blob size (%d) is too small\n", totalsize);
+		die("DT blob size (%"PRId32") is too small\n", totalsize);
 
 	blob = xmalloc(totalsize);
 
@@ -852,7 +853,7 @@ struct dt_info *dt_from_blob(const char *fname)
 
 	while (sizeleft) {
 		if (feof(f))
-			die("EOF before reading %d bytes of DT blob\n",
+			die("EOF before reading %"PRId32" bytes of DT blob\n",
 			    totalsize);
 
 		rc = fread(p, 1, sizeleft, f);
@@ -909,7 +910,7 @@ struct dt_info *dt_from_blob(const char *fname)
 	val = flat_read_word(&dtbuf);
 
 	if (val != FDT_BEGIN_NODE)
-		die("Device tree blob doesn't begin with FDT_BEGIN_NODE (begins with 0x%08x)\n", val);
+		die("Device tree blob doesn't begin with FDT_BEGIN_NODE (begins with 0x%08"PRIx32")\n", val);
 
 	tree = unflatten_tree(&dtbuf, &strbuf, "", flags);
 
diff --git libfdt/Makefile.libfdt libfdt/Makefile.libfdt
index b6d8fc0..56c8b03 100644
--- libfdt/Makefile.libfdt
+++ libfdt/Makefile.libfdt
@@ -4,15 +4,12 @@
 # This is not a complete Makefile of itself.  Instead, it is designed to
 # be easily embeddable into other systems of Makefiles.
 #
-LIBFDT_soname = libfdt.$(SHAREDLIB_EXT).1
 LIBFDT_INCLUDES = fdt.h libfdt.h libfdt_env.h
 LIBFDT_VERSION = version.lds
 LIBFDT_SRCS = fdt.c fdt_ro.c fdt_wip.c fdt_sw.c fdt_rw.c fdt_strerror.c fdt_empty_tree.c \
 	fdt_addresses.c fdt_overlay.c fdt_check.c
 LIBFDT_OBJS = $(LIBFDT_SRCS:%.c=%.o)
-LIBFDT_LIB = libfdt-$(DTC_VERSION).$(SHAREDLIB_EXT)
 
 libfdt_clean:
 	@$(VECHO) CLEAN "(libfdt)"
 	rm -f $(STD_CLEANFILES:%=$(LIBFDT_dir)/%)
-	rm -f $(LIBFDT_dir)/$(LIBFDT_soname)
diff --git tests/Makefile.tests tests/Makefile.tests
index cb66c9f..c4d2597 100644
--- tests/Makefile.tests
+++ tests/Makefile.tests
@@ -58,17 +58,17 @@ TESTS_CLEANDIRS = $(TESTS_CLEANDIRS_L:%=$(TESTS_PREFIX)%)
 .PHONY: tests
 tests:	$(TESTS) $(TESTS_TREES)
 
-$(LIB_TESTS): %: $(TESTS_PREFIX)testutils.o util.o $(LIBFDT_lib)
+$(LIB_TESTS): %: $(TESTS_PREFIX)testutils.o util.o $(LIBFDT_archive)
 
 # Not necessary on all platforms; allow -ldl to be excluded instead of forcing
 # other platforms to patch it out.
 LIBDL = -ldl
-$(DL_LIB_TESTS): %: %.o $(TESTS_PREFIX)testutils.o util.o $(LIBFDT_lib)
+$(DL_LIB_TESTS): %: %.o $(TESTS_PREFIX)testutils.o util.o $(LIBFDT_archive)
 	@$(VECHO) LD [libdl] $@
 	$(LINK.c) -o $@ $^ $(LIBDL)
 
 $(LIBTREE_TESTS): %: $(TESTS_PREFIX)testutils.o $(TESTS_PREFIX)trees.o \
-		util.o $(LIBFDT_lib)
+		util.o $(LIBFDT_archive)
 
 $(TESTS_PREFIX)dumptrees: $(TESTS_PREFIX)trees.o
 

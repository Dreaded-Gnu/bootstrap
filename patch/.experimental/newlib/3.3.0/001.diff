diff --git .gitignore .gitignore
index 13a554aa0..e83b89f63 100644
--- .gitignore
+++ .gitignore
@@ -3,6 +3,8 @@
 *.orig
 *.rej
 
+/build
+
 *~
 .#*
 *#
diff --git config.sub config.sub
index 75bb6a313..c7dd7440e 100755
--- config.sub
+++ config.sub
@@ -1363,7 +1363,8 @@ case $os in
 	     | powermax* | dnix* | nx6 | nx7 | sei* | dragonfly* \
 	     | skyos* | haiku* | rdos* | toppers* | drops* | es* \
 	     | onefs* | tirtos* | phoenix* | fuchsia* | redox* | bme* \
-	     | midnightbsd* | amdhsa* | unleashed* | emscripten*)
+	     | midnightbsd* | amdhsa* | unleashed* | emscripten* \
+	     | bolthur*)
 	# Remember, each alternative MUST END IN *, to match a version number.
 		;;
 	qnx*)
diff --git libgloss/arm/Makefile.in libgloss/arm/Makefile.in
index e1bad1710..00027a85f 100644
--- libgloss/arm/Makefile.in
+++ libgloss/arm/Makefile.in
@@ -71,7 +71,13 @@ LINUX_OBJS    = linux-syscalls0.o linux-syscalls1.o
 LINUX_SCRIPTS = linux.specs
 LINUX_INSTALL = install-linux
 
-REDBOOT_CRT0	= redboot-crt0.o 
+BOLTHUR_CRT0    = bolthur-crt0.o
+BOLTHUR_BSP     = libgloss-bolthur.a
+BOLTHUR_OBJS    = bolthur-syscalls0.o bolthur-syscalls1.o
+BOLTHUR_SCRIPTS = bolthur.specs
+BOLTHUR_INSTALL = install-bolthur
+
+REDBOOT_CRT0	= redboot-crt0.o
 REDBOOT_OBJS	= redboot-syscalls.o
 REDBOOT_SCRIPTS	= redboot.ld redboot.specs
 REDBOOT_INSTALL	= install-redboot
@@ -109,7 +115,7 @@ INCLUDES += `if [ -d ${objroot}/newlib ]; then echo -I$(srcroot)/newlib/libc/mac
 # build a test program for each target board. Just trying to get
 # it to link is a good test, so we ignore all the errors for now.
 #
-all: ${CRT0} ${LINUX_CRT0} ${LINUX_BSP} ${REDBOOT_CRT0} ${REDBOOT_OBJS} ${RDPMON_CRT0} ${RDPMON_BSP} ${RDIMON_CRT0} ${RDIMON_BSP}
+all: ${CRT0} ${LINUX_CRT0} ${LINUX_BSP} ${BOLTHUR_CRT0} ${BOLTHUR_BSP} ${REDBOOT_CRT0} ${REDBOOT_OBJS} ${RDPMON_CRT0} ${RDPMON_BSP} ${RDIMON_CRT0} ${RDIMON_BSP}
 	@rootpre=`pwd`/; export rootpre; \
 	srcrootpre=`cd $(srcdir); pwd`/; export srcrootpre; \
 	for dir in .. ${SUBDIRS}; do \
@@ -164,6 +170,10 @@ $(LINUX_BSP): $(LINUX_OBJS)
 	${AR} ${ARFLAGS} $@ $^
 	${RANLIB} $@
 
+$(BOLTHUR_BSP): $(BOLTHUR_OBJS)
+	${AR} ${ARFLAGS} $@ $^
+	${RANLIB} $@
+
 $(RDPMON_BSP): $(RDPMON_OBJS)
 	${AR} ${ARFLAGS} $@ $^
 	${RANLIB} $@
@@ -206,7 +216,7 @@ distclean maintainer-clean realclean: clean
 	rm -f Makefile config.status *~
 
 .PHONY: install info install-info clean-info
-install: ${CRT0_INSTALL} ${LINUX_INSTALL} ${REDBOOT_INSTALL} ${RDPMON_INSTALL} ${RDIMON_INSTALL} ${IQ80310_INSTALL}  ${PID_INSTALL} ${NANO_INSTALL}
+install: ${CRT0_INSTALL} ${LINUX_INSTALL} ${BOLTHUR_INSTALL} ${REDBOOT_INSTALL} ${RDPMON_INSTALL} ${RDIMON_INSTALL} ${IQ80310_INSTALL}  ${PID_INSTALL} ${NANO_INSTALL}
 	@rootpre=`pwd`/; export rootpre; \
 	srcrootpre=`cd $(srcdir); pwd`/; export srcrootpre; \
 	for dir in .. ${SUBDIRS}; do \
@@ -228,6 +238,10 @@ install-linux:
 	set -e; for x in ${LINUX_CRT0} ${LINUX_BSP}; do ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done
 	set -e; for x in ${LINUX_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done
 
+install-bolthur:
+	set -e; for x in ${BOLTHUR_CRT0} ${BOLTHUR_BSP}; do ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done
+	set -e; for x in ${BOLTHUR_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done
+
 install-redboot:
 	set -e; for x in ${REDBOOT_CRT0} ${REDBOOT_OBJS}; do ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done
 	set -e; for x in ${REDBOOT_SCRIPTS}; do ${INSTALL_DATA} ${srcdir}/${objtype}$$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; done
@@ -259,4 +273,4 @@ Makefile: Makefile.in config.status @host_makefile_frag_path@
 config.status: configure
 	$(SHELL) config.status --recheck
 
-include $(srcdir)/../multi-build.in
\ No newline at end of file
+include $(srcdir)/../multi-build.in
diff --git libgloss/arm/bolthur-crt0.c libgloss/arm/bolthur-crt0.c
new file mode 100644
index 000000000..a3997531e
--- /dev/null
+++ libgloss/arm/bolthur-crt0.c
@@ -0,0 +1,89 @@
+
+/**
+ * Bolthur system startup for the ARM processor.
+ * Written by Christian Freitag <cfreitag.cf@googlemail.com>
+ * Copyright 2020 (c) Christian Freitag
+ *
+ * Permission to use, copy, modify, and distribute this software
+ * is freely granted, provided that this notice is preserved.
+ */
+
+/**
+ * Bolthur startup code for arm processor
+ */
+#include <stdlib.h>
+#include <unistd.h>
+#include <stdnoreturn.h>
+#include "arm.h"
+
+/* forward declaration */
+int main( int argc, char* argv[], char* env[] );
+extern char** environ;
+// extern int _init_signal( void );
+
+/* bss start and end for cleanup */
+extern unsigned int __bss_start__;
+extern unsigned int __bss_end__;
+
+/* provided by gcc */
+#if defined( __USES_INITFINI__ )
+  extern void _init( void );
+  extern void _fini( void );
+#endif
+
+/**
+ * @brief Helper to clear bss section
+ */
+static void clear_bss( void ) {
+  // get bss start
+  char* clear = ( char* )&__bss_start__;
+  char* end = ( char* )&__bss_end__;
+  // clear until end
+  while ( clear < end ) {
+    *clear++ = 0;
+  }
+}
+
+/**
+ * @brief Function called before c main
+ */
+noreturn static int _main( int argc, char* argv[] ) {
+  // set environment global
+  environ = argv + argc + 1;
+  // execute main wrapped with exit
+  exit( main( argc, argv, environ ) );
+}
+
+#if __thumb__ && !defined(PREFER_THUMB)
+asm("\n"
+  ".code 32\n"
+  ".global _start\n"
+  ".type _start, %function\n"
+  "_start:\n"
+  "\tldr r0, .LC0\n"
+  "\tbx r0\n"
+  ".LC0:\n"
+  "\t.word _start_thumb\n"
+  ".size _start, .-_start\n");
+
+__attribute__((naked, used))
+static void _start_thumb(void)
+#else
+__attribute__((naked))
+void _start(void)
+#endif
+{
+  // stack register
+  register int *sp asm( "sp" );
+  // clear out bss
+  clear_bss();
+  // init handling
+  #if defined( __USES_INITFINI__ )
+    // call init if existing
+    _init();
+  #endif
+  // init signals
+  // _init_signal();
+  // call early main
+  _main( *sp, ( char** )( sp + 1 ) );
+}
diff --git libgloss/arm/bolthur-syscall.h libgloss/arm/bolthur-syscall.h
new file mode 100644
index 000000000..2a64c7d55
--- /dev/null
+++ libgloss/arm/bolthur-syscall.h
@@ -0,0 +1,24 @@
+
+/**
+ * Bolthur system call numbers for the ARM processor.
+ * Written by Christian Freitag <cfreitag.cf@googlemail.com>
+ * Copyright 2020 (c) Christian Freitag
+ *
+ * Permission to use, copy, modify, and distribute this software
+ * is freely granted, provided that this notice is preserved.
+ */
+
+#ifndef _LIBGLOSS_ARM_BOLTHUR_UNISTD_H
+#define _LIBGLOSS_ARM_BOLTHUR_UNISTD_H
+
+#define SYSCALL_process_exit 2
+#define SYSCALL_process_id 3
+
+#define SYSCALL_memory_acquire 21
+#define SYSCALL_memory_release 22
+
+// wrapper
+#define SYSCALL_getpid SYSCALL_process_id
+#define SYSCALL_exit SYSCALL_process_exit
+
+#endif /* _LIBGLOSS_ARM_BOLTHUR_UNISTD_H */
diff --git libgloss/arm/bolthur-syscalls0.S libgloss/arm/bolthur-syscalls0.S
new file mode 100644
index 000000000..6095182ba
--- /dev/null
+++ libgloss/arm/bolthur-syscalls0.S
@@ -0,0 +1,38 @@
+
+/**
+ * Bolthur system call numbers for the ARM processor.
+ * Written by Christian Freitag <cfreitag.cf@googlemail.com>
+ * Copyright 2020 (c) Christian Freitag
+ *
+ * Permission to use, copy, modify, and distribute this software
+ * is freely granted, provided that this notice is preserved.
+ */
+
+#include "bolthur-syscall.h"
+
+#if __thumb__
+# define FUNC(name) .type name, %function; .thumb_func; name:
+# define SET .thumb_set
+#else
+# define FUNC(name) .type name, %function; name:
+# define SET .set
+#endif
+
+#define GLOBAL(name) .global name; FUNC(name)
+#define SIZE(name) .size name, .-name
+
+# define SYSCALL(name) \
+	GLOBAL(_ ## name); \
+	svc #SYSCALL_ ## name; \
+	b _set_errno; \
+	SIZE(_ ## name)
+
+# normal system calls
+SYSCALL( memory_acquire )
+SYSCALL( memory_release )
+SYSCALL( process_id )
+SYSCALL( process_exit )
+
+# wrapped system calls
+SYSCALL( getpid )
+SYSCALL( exit )
diff --git libgloss/arm/bolthur-syscalls1.c libgloss/arm/bolthur-syscalls1.c
new file mode 100644
index 000000000..245803d4e
--- /dev/null
+++ libgloss/arm/bolthur-syscalls1.c
@@ -0,0 +1,30 @@
+
+/**
+ * Bolthur system call numbers for the ARM processor.
+ * Written by Christian Freitag <cfreitag.cf@googlemail.com>
+ * Copyright 2020 (c) Christian Freitag
+ *
+ * Permission to use, copy, modify, and distribute this software
+ * is freely granted, provided that this notice is preserved.
+ */
+
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/fcntl.h>
+#include <sys/times.h>
+#include <sys/errno.h>
+#include <sys/time.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <errno.h>
+
+#undef errno
+extern int errno;
+
+int _set_errno( int n ) {
+  if ( n < 0 ) {
+    errno = -n;
+    return -1;
+  }
+  return n;
+}
diff --git libgloss/arm/elf-bolthur.specs libgloss/arm/elf-bolthur.specs
new file mode 100644
index 000000000..d71a6ec89
--- /dev/null
+++ libgloss/arm/elf-bolthur.specs
@@ -0,0 +1,10 @@
+%rename lib libc
+
+*libgloss:
+-lgloss-bolthur
+
+*lib:
+%(libc) %(libgloss)
+
+*startfile:
+bolthur-crt0%O%s crti%O%s crtbegin%O%s
diff --git newlib/Makefile.am newlib/Makefile.am
index 809d49238..0cbb9c82e 100644
--- newlib/Makefile.am
+++ newlib/Makefile.am
@@ -140,9 +140,8 @@ LIBM_OBJECTLISTS = \
 	libm/common/objectlist.awk.in \
 	$(LIBM_MACHINE_OBJECTLIST)
 
-libm_la_LDFLAGS = -version-info $(LIBTOOL_VERSION_INFO) -release newlib -no-undefined -Xcompiler -nostdlib -Xlinker --version-script=$(srcdir)/libc/sys/linux/shared.ld -lgcc -objectlist libm-libtool-objectlist
-
-libc_la_LDFLAGS = -version-info $(LIBTOOL_VERSION_INFO) -release newlib -no-undefined -Xcompiler -nostdlib -Xlinker --version-script=$(srcdir)/libc/sys/linux/shared.ld -lgcc -objectlist libc-libtool-objectlist
+libm_la_LDFLAGS = -version-info $(LIBTOOL_VERSION_INFO) -release newlib -no-undefined -Xcompiler -nostdlib -Xlinker --version-script=$(srcdir)/libc/sys/$(sys_dir)/shared.ld -lgcc -objectlist libm-libtool-objectlist
+libc_la_LDFLAGS = -version-info $(LIBTOOL_VERSION_INFO) -release newlib -no-undefined -Xcompiler -nostdlib -Xlinker --version-script=$(srcdir)/libc/sys/$(sys_dir)/shared.ld -lgcc -objectlist libc-libtool-objectlist
 
 if USE_LIBTOOL
 libm_la_SOURCES =
diff --git newlib/configure.host newlib/configure.host
index a84c0c80a..71a2e5d0b 100644
--- newlib/configure.host
+++ newlib/configure.host
@@ -191,11 +191,11 @@ case "${host_cpu}" in
   i[34567]86)
 	# Don't use for these since they provide their own setjmp.
 	case ${host} in
-	*-*-sco* | *-*-cygwin*) 
+	*-*-sco* | *-*-cygwin*)
 		libm_machine_dir=i386
 		machine_dir=i386
 		;;
-	*) 
+	*)
 		libm_machine_dir=i386
 		machine_dir=i386
 		mach_add_setjmp=true
@@ -211,7 +211,7 @@ case "${host_cpu}" in
 	machine_dir=lm32
 	;;
   m32c)
-	machine_dir=m32c	
+	machine_dir=m32c
 	newlib_cflags="${newlib_cflags} -DPREFER_SIZE_OVER_SPEED -DSMALL_MEMORY"
 	;;
 
@@ -224,7 +224,7 @@ case "${host_cpu}" in
 	newlib_cflags="-DPREFER_SIZE_OVER_SPEED -Os -mrelax"
 	CFLAGS="-g -Os"
 	;;
-  
+
   m68*)
 	machine_dir=m68k
 	newlib_cflags="${newlib_cflags} -DCOMPACT_CTYPE"
@@ -418,7 +418,17 @@ case "${host}" in
     stdio64_dir=stdio64
     oext=lo
     lpfx=
-    aext=la ;;
+    aext=la
+    ;;
+  *-*-bolthur*)
+    if test "$enable_shared" = "yes"; then
+      use_libtool=yes
+      have_sys_mach_dir=no
+      oext=lo
+      lpfx=
+      aext=la
+    fi
+    ;;
   *) ;; #shared library not supported for ${host}
 esac
 
@@ -429,6 +439,17 @@ esac
 # THIS TABLE IS ALPHA SORTED.  KEEP IT THAT WAY.
 
 case "${host}" in
+  *-*-bolthur*)
+  sys_dir=bolthur
+  posix_dir=posix
+  unix_dir=unix
+  # crt0 is provided by libgloss.
+  have_crt0="no"
+  #if test "$enable_shared" = "yes"; then
+    # --- Required when building a shared library ------------------------
+    newlib_cflags="${newlib_cflags} -fPIC"
+  #fi
+  ;;
   *-*-cygwin*)
 	posix_dir=posix
 	stdio64_dir=stdio64
@@ -528,7 +549,7 @@ case "${host}" in
 	unix_dir=unix
 	posix_dir=posix
 	crt1=crt1.o
-	crt1_dir=libc/sys/${sys_dir}	
+	crt1_dir=libc/sys/${sys_dir}
 	gcc_dir=`gcc -print-search-dirs | awk '/^install:/{print $2}'`
 	default_newlib_io_c99_formats="yes"
 	default_newlib_io_long_double="yes"
@@ -633,6 +654,11 @@ esac
 # THIS TABLE IS ALPHA SORTED.  KEEP IT THAT WAY.
 
 case "${host}" in
+	*-*-bolthur*)
+	newlib_cflags="${newlib_cflags} -DSIGNAL_PROVIDED"
+	newlib_cflags="${newlib_cflags} -Werror"
+	newlib_cflags="${newlib_cflags} -Wall"
+	;;
   *-*-cygwin*)
 	test -z "$cygwin_srcdir" && cygwin_srcdir=`cd ${srcdir}/../winsup/cygwin; pwd`
 	export cygwin_srcdir
@@ -662,7 +688,7 @@ case "${host}" in
 	newlib_cflags="${newlib_cflags} -ffunction-sections -fdata-sections "
 	newlib_cflags="${newlib_cflags} -D_COMPILING_NEWLIB"
 newlib_cflags="${newlib_cflags} -DCLOCK_PROVIDED -DMALLOC_PROVIDED -DEXIT_PROVIDED -DSIGNAL_PROVIDED -DGETREENT_PROVIDED -DREENTRANT_SYSCALLS_PROVIDED -DHAVE_NANOSLEEP -DHAVE_BLKSIZE -DHAVE_FCNTL -DHAVE_ASSERT_FUNC"
-        # turn off unsupported items in posix directory 
+        # turn off unsupported items in posix directory
 	newlib_cflags="${newlib_cflags} -D_NO_GETLOGIN -D_NO_GETPWENT -D_NO_GETUT -D_NO_GETPASS -D_NO_SIGSET -D_NO_WORDEXP -D_NO_POPEN -D_NO_POSIX_SPAWN"
 	;;
 # VxWorks supplies its own version of malloc, and the newlib one
@@ -749,17 +775,17 @@ newlib_cflags="${newlib_cflags} -DCLOCK_PROVIDED -DMALLOC_PROVIDED -DEXIT_PROVID
         syscall_dir=syscalls
         ;;
   h8300*-*-*)
-	syscall_dir=syscalls	
+	syscall_dir=syscalls
 	default_newlib_io_long_long="yes"
 	newlib_cflags="${newlib_cflags} -DSMALL_DTOA -DSMALL_MEMORY"
 	# Simulator only extensions for H8300.
 	# Uncomment the next line to enable them.
 	# newlib_cflags="${newlib_cflags} -D__SIMULATOR__"
-	;;	
+	;;
   h8500-*-*)
-	syscall_dir=syscalls	
+	syscall_dir=syscalls
 	newlib_cflags="${newlib_cflags} -DSMALL_DTOA -DSMALL_MEMORY"
-	;;	
+	;;
   i[34567]86-*-sco*)
 	newlib_cflags="${newlib_cflags} -DSIGNAL_PROVIDED -DHAVE_FCNTL"
 	;;
@@ -906,7 +932,7 @@ newlib_cflags="${newlib_cflags} -DCLOCK_PROVIDED -DMALLOC_PROVIDED -DEXIT_PROVID
 	syscall_dir=
 	;;
   w65-*-*)
-	syscall_dir=syscalls	
+	syscall_dir=syscalls
 	newlib_cflags="${newlib_cflags} -DSMALL_DTOA -DSMALL_MEMORY"
 	;;
   xc16x-*)
@@ -957,7 +983,7 @@ fi
 # Disable atexit dynamic allocation if requested.
 if [ "x${newlib_atexit_dynamic_alloc}" = "x" ]; then
 	if [ ${default_newlib_atexit_dynamic_alloc} = "yes" ]; then
-		newlib_atexit_dynamic_alloc="yes"; 
+		newlib_atexit_dynamic_alloc="yes";
 	fi
 fi
 
diff --git newlib/libc/machine/arm/Makefile.am newlib/libc/machine/arm/Makefile.am
index 9bd35e733..3f67984e1 100644
--- newlib/libc/machine/arm/Makefile.am
+++ newlib/libc/machine/arm/Makefile.am
@@ -6,21 +6,29 @@ INCLUDES = $(NEWLIB_CFLAGS) $(CROSS_CFLAGS) $(TARGET_CFLAGS)
 
 AM_CCASFLAGS = $(INCLUDES)
 
+LIB_SOURCES = \
+	setjmp.S strcmp.S strcpy.c \
+  aeabi_memcpy.c aeabi_memcpy-armv7a.S \
+  aeabi_memmove.c aeabi_memmove-soft.S \
+  aeabi_memset.c aeabi_memset-soft.S aeabi_memclr.c \
+  memchr-stub.c memchr.S memcpy-stub.c memcpy.S \
+  strlen-stub.c strlen.S
+
+libarm_la_LDFLAGS = -Xcompiler -nostdlib
+
+if USE_LIBTOOL
+noinst_LTLIBRARIES = libarm.la
+libarm_la_SOURCES = $(LIB_SOURCES)
+noinst_DATA = objectlist.awk.in
+else
 noinst_LIBRARIES = lib.a
+lib_a_SOURCES = $(LIB_SOURCES)
+lib_a_CCASFLAGS = $(AM_CCASFLAGS)
+lib_a_CFLAGS=$(AM_CFLAGS)
+noinst_DATA =
+endif # USE_LIBTOOL
 
-lib_a_SOURCES = setjmp.S strcmp.S strcpy.c \
-		aeabi_memcpy.c aeabi_memcpy-armv7a.S \
-		aeabi_memmove.c aeabi_memmove-soft.S \
-		aeabi_memset.c aeabi_memset-soft.S aeabi_memclr.c
-lib_a_SOURCES += memchr-stub.c
-lib_a_SOURCES += memchr.S
-lib_a_SOURCES += memcpy-stub.c
-lib_a_SOURCES += memcpy.S
-lib_a_SOURCES += strlen-stub.c
-lib_a_SOURCES += strlen.S
-
-lib_a_CCASFLAGS=$(AM_CCASFLAGS)
-lib_a_CFLAGS = $(AM_CFLAGS)
+include $(srcdir)/../../../Makefile.shared
 
 ACLOCAL_AMFLAGS = -I ../../.. -I ../../../..
 CONFIG_STATUS_DEPENDENCIES = $(newlib_basedir)/configure.host
@@ -34,21 +42,22 @@ AEABI_MEMMOVE_DEP=aeabi_memmove-thumb.S aeabi_memmove-thumb2.S \
 AEABI_MEMSET_DEP=aeabi_memset-thumb.S aeabi_memset-thumb2.S \
 	aeabi_memset-arm.S
 
-$(lpfx)memchr.o: $(MEMCHR_DEP)
-$(lpfx)memchr.obj: $(MEMCHR_DEP)
-
-$(lpfx)memcpy.o: $(MEMCPY_DEP)
+if USE_LIBTOOL
+  $(lpfx)memchr.lo: $(MEMCHR_DEP)
+  $(lpfx)memcpy.lo: $(MEMCPY_DEP)
+  $(lpfx)strcmp.lo: $(STRCMP_DEP)
+  $(lpfx)aeabi_memmove.lo: $(AEABI_MEMMOVE_DEP)
+  $(lpfx)aeabi_memset.lo: $(AEABI_MEMSET_DEP)
+else
+  $(lpfx)memchr.o: $(MEMCHR_DEP)
+  $(lpfx)memcpy.o: $(MEMCPY_DEP)
+  $(lpfx)strcmp.o: $(STRCMP_DEP)
+  $(lpfx)aeabi_memmove.o: $(AEABI_MEMMOVE_DEP)
+  $(lpfx)aeabi_memset.o: $(AEABI_MEMSET_DEP)
+endif # USE_LIBTOOL
 
+$(lpfx)memchr.obj: $(MEMCHR_DEP)
 $(lpfx)memcpy.obj: $(MEMCPY_DEP)
-
-$(lpfx)strcmp.o: $(STRCMP_DEP)
-
 $(lpfx)strcmp.obj: $(STRCMP_DEP)
-
-$(lpfx)aeabi_memmove.o: $(AEABI_MEMMOVE_DEP)
-
 $(lpfx)aeabi_memmove.obj: $(AEABI_MEMMOVE_DEP)
-
-$(lpfx)aeabi_memset.o: $(AEABI_MEMSET_DEP)
-
 $(lpfx)aeabi_memset.obj: $(AEABI_MEMSET_DEP)
diff --git newlib/libc/machine/arm/configure.in newlib/libc/machine/arm/configure.in
index 833b197a5..3f6f62ad0 100644
--- newlib/libc/machine/arm/configure.in
+++ newlib/libc/machine/arm/configure.in
@@ -5,11 +5,22 @@ AC_PREREQ(2.59)
 AC_INIT([newlib],[NEWLIB_VERSION])
 AC_CONFIG_SRCDIR([Makefile.am])
 
-dnl Can't be done in NEWLIB_CONFIGURE because that confuses automake. 
+dnl Can't be done in NEWLIB_CONFIGURE because that confuses automake.
 AC_CONFIG_AUX_DIR(../../../..)
 
 NEWLIB_CONFIGURE(../../..)
 
+dnl We have to add the following lines because automake detects the
+dnl references to libtool libraries from aclocal and tries to verify that
+dnl AM_PROG_LIBTOOL is being used.  This code must occur after
+dnl NEWLIB_CONFIGURE.
+_LT_DECL_SED
+_LT_PROG_ECHO_BACKSLASH
+if test "${use_libtool}" = "yes"; then
+AC_LIBTOOL_WIN32_DLL
+AM_PROG_LIBTOOL
+fi
+
 AC_SUBST(CFLAGS)
 
 AC_CONFIG_FILES([Makefile])
diff --git newlib/libc/sys/bolthur/Makefile.am newlib/libc/sys/bolthur/Makefile.am
new file mode 100644
index 000000000..dc6844df8
--- /dev/null
+++ newlib/libc/sys/bolthur/Makefile.am
@@ -0,0 +1,95 @@
+## Process this file with automake to generate Makefile.in
+
+AUTOMAKE_OPTIONS = cygnus
+
+INCLUDES = $(NEWLIB_CFLAGS) $(CROSS_CFLAGS) $(TARGET_CFLAGS)
+
+AM_CCASFLAGS = $(INCLUDES)
+
+if ELIX_LEVEL_1
+argp_dir=
+ARGP_LIB=
+else
+argp_dir=
+ARGP_LIB=
+#argp_dir=argp
+#ARGP_LIB=argp/libargp.la
+endif
+
+SUBDIRS = \
+	$(argp_dir) \
+	$(EXTRA_SUBDIRS) \
+	.
+SUBLIBS = \
+	$(ARGP_LIB) \
+	$(EXTRA_SUBLIBS)
+
+GENERAL_SOURCES = \
+	highlevel.c
+ELIX_2_SOURCES =
+ELIX_3_SOURCES =
+ELIX_4_SOURCES =
+
+if ELIX_LEVEL_1
+ELIX_SOURCES =
+else
+if ELIX_LEVEL_2
+ELIX_SOURCES = $(ELIX_2_SOURCES)
+else
+if ELIX_LEVEL_3
+ELIX_SOURCES = $(ELIX_2_SOURCES) $(ELIX_3_SOURCES)
+else
+ELIX_SOURCES = $(ELIX_2_SOURCES) $(ELIX_3_SOURCES) $(ELIX_4_SOURCES)
+endif
+endif
+endif
+
+libbolthur_la_LDFLAGS = -Xcompiler -nostdlib
+
+if USE_LIBTOOL
+noinst_LTLIBRARIES = libbolthur.la
+libbolthur_la_SOURCES = $(GENERAL_SOURCES) $(ELIX_SOURCES)
+libbolthur_la_LIBADD = $(ADD_OBJS)
+libbolthur_la_DEPENDENCIES = $(ADD_OBJS)
+LIBC_COMPILE = $(LTCOMPILE)
+noinst_DATA = objectlist.awk.in
+else
+noinst_LIBRARIES = lib.a
+lib_a_SOURCES = $(GENERAL_SOURCES) $(ELIX_SOURCES)
+lib_a_LIBADD = $(ADD_OBJS)
+lib_a_DEPENDENCIES = $(ADD_OBJS)
+lib_a_CFLAGS = $(AM_CFLAGS)
+LIBC_COMPILE = $(COMPILE)
+noinst_DATA =
+
+# FIXME: ADD AGAIN, WHEN SUBLIB OBJECTS ARE EXISTING
+# lib.a:  $(lib_a_OBJECTS)
+# 	rm -f $@
+# 	rm -rf tmp
+# 	mkdir tmp
+# 	cd tmp; \
+# 	for i in $(SUBLIBS); do \
+# 	  $(AR) x ../$$i; \
+# 	done; \
+# 	$(AR) $(AR_FLAGS) ../$@ *.o
+# 	$(RANLIB) $@
+# 	rm -rf tmp
+
+endif # USE_LIBTOOL
+
+objectlist.awk.in: $(noinst_LTLIBRARIES) $(SUBLIBS)
+	-rm -f objectlist.awk.in
+	for i in `ls *.lo` ; \
+		do \
+			echo $$i `pwd`/$$i >> objectlist.awk.in ; \
+	done
+	for j in $(SUBLIBS) ; \
+		do \
+			export i=`echo $$j | sed -e 's,\(.*\)\/[^\/]*$$,\1,'`; \
+			if test $$i != "." && test -f $$i/objectlist.awk.in; then \
+				cat $$i/objectlist.awk.in >> objectlist.awk.in ; \
+			fi; \
+	done
+
+ACLOCAL_AMFLAGS = -I ../../.. -I ../../../..
+CONFIG_STATUS_DEPENDENCIES = $(newlib_basedir)/configure.host
diff --git newlib/libc/sys/bolthur/configure.in newlib/libc/sys/bolthur/configure.in
new file mode 100644
index 000000000..d42623872
--- /dev/null
+++ newlib/libc/sys/bolthur/configure.in
@@ -0,0 +1,40 @@
+
+AC_PREREQ(2.59)
+AC_INIT([newlib],[NEWLIB_VERSION])
+AC_CONFIG_SRCDIR([highlevel.c])
+
+dnl Can't be done in NEWLIB_CONFIGURE because that confuses automake.
+AC_CONFIG_AUX_DIR(../../../..)
+
+NEWLIB_CONFIGURE(../../..)
+
+dnl We have to enable libtool after NEWLIB_CONFIGURE because if we try and
+dnl add it into NEWLIB_CONFIGURE, executable tests are made before the first
+dnl line of the macro which fail because appropriate LDFLAGS are not set.
+_LT_DECL_SED
+_LT_PROG_ECHO_BACKSLASH
+AC_PROG_AWK
+if test "${use_libtool}" = "yes"; then
+AC_LIBTOOL_WIN32_DLL
+AM_PROG_LIBTOOL
+fi
+
+# if test "${newlib_multithread}" = "yes"; then
+# AC_CONFIG_SUBDIRS(linuxthreads)
+# fi
+
+EXTRA_SUBDIRS=
+EXTRA_SUBLIBS=
+
+# if test "x${newlib_elix_level}" = "x1"; then
+# EXTRA_SUBDIRS=linuxthreads net
+# else
+# EXTRA_SUBDIRS="linuxthreads net intl iconv dl"
+# EXTRA_SUBLIBS="net/libnet.la intl/libintl.la iconv/libiconv.la dl/libdl.la"
+# fi
+
+AC_SUBST(EXTRA_SUBDIRS)
+AC_SUBST(EXTRA_SUBLIBS)
+
+AC_CONFIG_FILES([Makefile])
+AC_OUTPUT
diff --git newlib/libc/sys/bolthur/highlevel.c newlib/libc/sys/bolthur/highlevel.c
new file mode 100644
index 000000000..05cebff83
--- /dev/null
+++ newlib/libc/sys/bolthur/highlevel.c
@@ -0,0 +1,123 @@
+
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/fcntl.h>
+#include <sys/times.h>
+#include <sys/errno.h>
+#include <sys/time.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <errno.h>
+
+#define MAX_POOL_ENTRIES 100
+
+static int next_pool;
+void* pool[ MAX_POOL_ENTRIES ];
+
+extern caddr_t _memory_acquire( int, int );
+extern void _memory_release( uintptr_t, int );
+
+/**
+ * @brief sbrk fake syscall ( non contiguous )
+ *
+ * @param incr
+ * @return caddr_t
+ */
+caddr_t _sbrk( int incr ) {
+  void *ptr = 0;
+  static caddr_t sbrk_top = 0;
+
+  if ( incr > 0 ) {
+    // allocate memory
+    ptr = _memory_acquire( incr, 2 );
+    // handle error
+    if ( 0 == ptr ) {
+      return ( caddr_t )-1;
+    }
+    // save for free during cleanup
+    pool[ next_pool++ ] = ptr;
+    // FIXME: ADJUST HERE
+    //ptr = ( caddr_t )( ( ( ( size_t )ptr ) + RM_PAGE_MASK ) & ~RM_PAGE_MASK );
+    // set new top
+    sbrk_top = ( caddr_t )ptr + incr;
+    // return pointer
+    return ptr;
+  // shrink is not supported
+  } else if ( incr < 0 ) {
+    return ( void* )-1;
+  } else {
+    return sbrk_top;
+  }
+}
+
+int _close( int file ) {
+  return -1;
+}
+
+int _execve( char* name, char** argv, char** env ) {
+  errno = ENOMEM;
+  return -1;
+}
+
+int _fork() {
+  errno = EAGAIN;
+  return -1;
+}
+
+int _fstat( int file, struct stat* st ) {
+  st->st_mode = S_IFCHR;
+  return 0;
+}
+
+int _isatty( int file ) {
+  return 1;
+}
+
+int _kill( int pid, int sig ) {
+  errno = EINVAL;
+  return -1;
+}
+
+int _link( char* old, char* new ) {
+  errno = EMLINK;
+  return -1;
+}
+
+int _lseek( int file, int ptr, int dir ) {
+  return 0;
+}
+
+int _open( const char* name, int flags, ... ) {
+  return -1;
+}
+
+int _read( int file, char* ptr, int len ) {
+  return 0;
+}
+
+int _stat( const char* file, struct stat* st ) {
+  st->st_mode = S_IFCHR;
+  return 0;
+}
+
+clock_t _times( struct tms* buf ) {
+  return -1;
+}
+
+int _unlink( char* name ) {
+  errno = ENOENT;
+  return -1;
+}
+
+int _wait( int* status ) {
+  errno = ECHILD;
+  return -1;
+}
+
+int _write( int file, char* ptr, int len ) {
+  return -1;
+}
+
+int _gettimeofday( struct timeval* p, struct timezone* z ) {
+  return -1;
+}
diff --git newlib/libc/sys/bolthur/shared.ld newlib/libc/sys/bolthur/shared.ld
new file mode 100644
index 000000000..e7bc07b09
--- /dev/null
+++ newlib/libc/sys/bolthur/shared.ld
@@ -0,0 +1,71 @@
+VERS_1.10 {
+	global: *;
+};
+
+VERS_1.11 {
+	global: *;
+};
+
+VERS_1.12 {
+	global: *;
+};
+
+VERS_1.13 {
+	global: *;
+};
+
+VERS_1.14 {
+	global: *;
+};
+
+VERS_1.15 {
+	global: *;
+};
+
+VERS_1.16 {
+	global: *;
+};
+
+VERS_1.17 {
+	global: *;
+};
+
+VERS_1.18 {
+	global: *;
+};
+
+VERS_1.19 {
+	global: *;
+};
+
+VERS_1.20 {
+	global: *;
+};
+
+VERS_2.0 {
+	global: *;
+};
+
+VERS_2.1 {
+	global: *;
+};
+
+VERS_2.2 {
+	global: *;
+};
+
+VERS_3.0 {
+	global: *;
+};
+
+VERS_3.1 {
+	global: *;
+};
+
+VERS_3.2 {
+	global: *;
+};
+
+VERS_3.3 {
+	global: *;
+};
diff --git newlib/libc/sys/bolthur/sys/dirent.h newlib/libc/sys/bolthur/sys/dirent.h
new file mode 100644
index 000000000..d2b455d31
--- /dev/null
+++ newlib/libc/sys/bolthur/sys/dirent.h
@@ -0,0 +1,13 @@
+
+/**
+ * Written by Christian Freitag <cfreitag.cf@googlemail.com>
+ * Copyright 2020 (c) Christian Freitag
+ *
+ * Permission to use, copy, modify, and distribute this software
+ * is freely granted, provided that this notice is preserved.
+ */
+
+#ifndef _SYS_DIRENT_H
+#define _SYS_DIRENT_H
+
+#endif
diff --git newlib/libc/sys/bolthur/sys/fcntl.h newlib/libc/sys/bolthur/sys/fcntl.h
new file mode 100644
index 000000000..ed6d7163a
--- /dev/null
+++ newlib/libc/sys/bolthur/sys/fcntl.h
@@ -0,0 +1,13 @@
+
+/**
+ * Written by Christian Freitag <cfreitag.cf@googlemail.com>
+ * Copyright 2020 (c) Christian Freitag
+ *
+ * Permission to use, copy, modify, and distribute this software
+ * is freely granted, provided that this notice is preserved.
+ */
+
+#ifndef _SYS_FCNTL_H
+#define _SYS_FCNTL_H
+
+#endif
diff --git newlib/libc/sys/bolthur/sys/signal.h newlib/libc/sys/bolthur/sys/signal.h
new file mode 100644
index 000000000..c9e2db19a
--- /dev/null
+++ newlib/libc/sys/bolthur/sys/signal.h
@@ -0,0 +1,13 @@
+
+/**
+ * Written by Christian Freitag <cfreitag.cf@googlemail.com>
+ * Copyright 2020 (c) Christian Freitag
+ *
+ * Permission to use, copy, modify, and distribute this software
+ * is freely granted, provided that this notice is preserved.
+ */
+
+#ifndef _SYS_SIGNAL_H
+#define _SYS_SIGNAL_H
+
+#endif
diff --git newlib/libc/sys/bolthur/sys/stat.h newlib/libc/sys/bolthur/sys/stat.h
new file mode 100644
index 000000000..6660ecc99
--- /dev/null
+++ newlib/libc/sys/bolthur/sys/stat.h
@@ -0,0 +1,13 @@
+
+/**
+ * Written by Christian Freitag <cfreitag.cf@googlemail.com>
+ * Copyright 2020 (c) Christian Freitag
+ *
+ * Permission to use, copy, modify, and distribute this software
+ * is freely granted, provided that this notice is preserved.
+ */
+
+#ifndef _SYS_STAT_H
+#define _SYS_STAT_H
+
+#endif
diff --git newlib/libc/sys/bolthur/sys/termios.h newlib/libc/sys/bolthur/sys/termios.h
new file mode 100644
index 000000000..78df43371
--- /dev/null
+++ newlib/libc/sys/bolthur/sys/termios.h
@@ -0,0 +1,13 @@
+
+/**
+ * Written by Christian Freitag <cfreitag.cf@googlemail.com>
+ * Copyright 2020 (c) Christian Freitag
+ *
+ * Permission to use, copy, modify, and distribute this software
+ * is freely granted, provided that this notice is preserved.
+ */
+
+#ifndef _SYS_TERMIOS_H_
+#define _SYS_TERMIOS_H_
+
+#endif
diff --git newlib/libc/sys/bolthur/sys/unistd.h newlib/libc/sys/bolthur/sys/unistd.h
new file mode 100644
index 000000000..09fd8d62c
--- /dev/null
+++ newlib/libc/sys/bolthur/sys/unistd.h
@@ -0,0 +1,13 @@
+
+/**
+ * Written by Christian Freitag <cfreitag.cf@googlemail.com>
+ * Copyright 2020 (c) Christian Freitag
+ *
+ * Permission to use, copy, modify, and distribute this software
+ * is freely granted, provided that this notice is preserved.
+ */
+
+#ifndef _SYS_UNISTD_H
+#define _SYS_UNISTD_H
+
+#endif
diff --git newlib/libc/sys/bolthur/sys/utmp.h newlib/libc/sys/bolthur/sys/utmp.h
new file mode 100644
index 000000000..60803d903
--- /dev/null
+++ newlib/libc/sys/bolthur/sys/utmp.h
@@ -0,0 +1,13 @@
+
+/**
+ * Written by Christian Freitag <cfreitag.cf@googlemail.com>
+ * Copyright 2020 (c) Christian Freitag
+ *
+ * Permission to use, copy, modify, and distribute this software
+ * is freely granted, provided that this notice is preserved.
+ */
+
+#ifndef _SYS_UTMP_H
+#define _SYS_UTMP_H
+
+#endif
diff --git newlib/libc/sys/configure.in newlib/libc/sys/configure.in
index a65d1e71f..44a6528df 100644
--- newlib/libc/sys/configure.in
+++ newlib/libc/sys/configure.in
@@ -5,7 +5,7 @@ AC_PREREQ(2.59)
 AC_INIT([newlib],[NEWLIB_VERSION])
 AC_CONFIG_SRCDIR([a29khif])
 
-dnl Can't be done in NEWLIB_CONFIGURE because that confuses automake. 
+dnl Can't be done in NEWLIB_CONFIGURE because that confuses automake.
 AC_CONFIG_AUX_DIR(../../..)
 
 NEWLIB_CONFIGURE(../..)
@@ -50,6 +50,7 @@ if test -n "${sys_dir}"; then
 	tirtos) AC_CONFIG_SUBDIRS(tirtos) ;;
 	w65) AC_CONFIG_SUBDIRS(w65) ;;
 	z8ksim) AC_CONFIG_SUBDIRS(z8ksim) ;;
+	bolthur) AC_CONFIG_SUBDIRS(bolthur) ;;
   esac;
 fi
 
